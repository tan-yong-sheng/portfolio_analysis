# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

parameters:
  # defaults for any parameters that are not specified
  name: ''
  vmImage: ''


jobs:

- job: ${{ parameters.name }}Test
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      python38_legacy:
        python.version: '3.8'
        NUMPY: 1.18.0
        SCIPY: 1.3.0
        PANDAS: 1.0.0
        STATSMODELS: 0.11.0
        XARRAY: 0.15.1
        FORMULAIC: 0.3.4
        test.install: true
      python39_mid:
        python.version: '3.9'
        NUMPY: 1.19.0
        SCIPY: 1.4.0
        PANDAS: 1.1.0
        STATSMODELS: 0.12.0
        XARRAY: 0.16.0
        XXHASH: true
        FORMULAIC: 0.4.0
        test.install: true
      python39_recent:
        python.version: '3.9'
        NUMPY: 1.20.0
        SCIPY: 1.5.0
        PANDAS: 1.2.0
        STATSMODELS: 0.12.0
        XARRAY: 0.17.0
        FORMULAIC: 0.5.2
        test.install: true
      python310_no_cython:
        python.version: '3.10'
        LM_NO_BINARY: 1
      python310_recent:
        python.version: '3.10'
        NUMPY: 1.21.0
        SCIPY: 1.7.0
        PANDAS: 1.3.0
        STATSMODELS: 0.13.0
        XARRAY: 0.19.0
      python310_latest:
        python.version: '3.10'
        XXHASH: true
      python311_latest:
        python.version: '3.11'
        XXHASH: true
      python311_copy_on_write:
        python.version: '3.11'
        XXHASH: true
        LM_TEST_COPY_ON_WRITE: 1
    maxParallel: 10

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
    displayName: 'Use Python $(python.version)'

  - script: |
      python -m pip install --upgrade pip setuptools>=61 wheel
      python -m pip install -r requirements.txt
      python -m pip install -r requirements-test.txt
      python -m pip install -r requirements-dev.txt
      source ci/install-posix.sh      
      jupyter kernelspec list
    displayName: 'Install dependencies'

  - script: |
      python -m pip list
    displayName: 'List Configuration'

  - script: |
     flake8 linearmodels
     black --check linearmodels
     isort --check linearmodels
    displayName: 'Check style and formatting'

  - script: |
      echo "Installing to site packages"
      python -m pip wheel . --wheel-dir ./dist/ --no-build-isolation
      WHL=$(ls -t ./dist/linearmodels-*.whl | head -1)
      pip install ${WHL}
    displayName: 'Install linearmodels (site-packages)'
    condition: eq(variables['test.install'], 'true')

  - script: |
      echo python -m pip install -e . -v --no-build-isolation
      python -m pip install -e . -v --no-build-isolation
    displayName: 'Install linearmodels (editable)'
    condition: ne(variables['test.install'], 'true')

  - script: |
      echo "Testing site packages"
      mkdir test_run_dir
      pushd test_run_dir
      python -c "import linearmodels; linearmodels.test(['-n', 'auto', '--junitxml=../junit/test-results.xml'])"
      popd
    displayName: 'Run tests (site-packages)'
    condition: eq(variables['test.install'], 'true')

  - script: |
      echo "Testing editable install"
      if [[ ${COVERAGE} == "true" ]]; then
        export COVERAGE_OPTS="--cov-config .coveragerc --cov=linearmodels --cov-report xml:coverage.xml --cov-report term"
      fi
      echo pytest -m "${PYTEST_PATTERN}" --junitxml=junit/test-results.xml -n auto --durations=25 ${COVERAGE_OPTS} linearmodels/tests
      pytest -m "${PYTEST_PATTERN}" --junitxml=junit/test-results.xml -n auto --durations=25 ${COVERAGE_OPTS} linearmodels/tests
    displayName: 'Run tests (editable)'
    condition: ne(variables['test.install'], 'true')

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    condition: and(eq(variables['coverage'], 'true'), ne(variables['test.install'], 'true'))

  - bash: bash <(curl -s https://codecov.io/bash)
    displayName: 'CodeCov upload'
    condition: and(eq(variables['coverage'], 'true'), ne(variables['test.install'], 'true'))
